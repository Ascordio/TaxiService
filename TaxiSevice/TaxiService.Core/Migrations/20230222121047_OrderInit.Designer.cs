// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiService.Core;

#nullable disable

namespace TaxiService.Core.Migrations
{
    [DbContext(typeof(TaxiServiceDbContext))]
    [Migration("20230222121047_OrderInit")]
    partial class OrderInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e8a6788-52b0-4af6-9991-2a7f89564ba5",
                            ConcurrencyStamp = "49bb3eaa-c0ad-49be-9273-eb39170a27cf",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0a69c6f7-c992-41d5-b36e-7f29544e65fc",
                            ConcurrencyStamp = "65c4367e-a9c4-4dad-a964-5d59de645012",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "46bc5482-f4ad-4287-a0e5-7edd0bcc0628",
                            ConcurrencyStamp = "2e65f450-ed2d-4548-9f52-fad9974aeacc",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d2ad42f0-ea92-4fad-b57e-1f593b1ecf7c",
                            RoleId = "4e8a6788-52b0-4af6-9991-2a7f89564ba5"
                        },
                        new
                        {
                            UserId = "8078e7a8-5392-49f9-8d4a-49dec4f7c33f",
                            RoleId = "46bc5482-f4ad-4287-a0e5-7edd0bcc0628"
                        },
                        new
                        {
                            UserId = "62b9d0bc-dafa-4ed3-a02b-ca8ca3ef8bd2",
                            RoleId = "0a69c6f7-c992-41d5-b36e-7f29544e65fc"
                        },
                        new
                        {
                            UserId = "62b9d0bc-dafa-4ed3-a02b-ca8ca3ef8bd2",
                            RoleId = "4e8a6788-52b0-4af6-9991-2a7f89564ba5"
                        },
                        new
                        {
                            UserId = "8078e7a8-5392-49f9-8d4a-49dec4f7c33f",
                            RoleId = "4e8a6788-52b0-4af6-9991-2a7f89564ba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaxiService.Core.BodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarInfoId");

                    b.ToTable("BodyTypes");
                });

            modelBuilder.Entity("TaxiService.Core.CarClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarInfoId");

                    b.ToTable("CarClasses");
                });

            modelBuilder.Entity("TaxiService.Core.CarColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarInfoId");

                    b.ToTable("CarColors");
                });

            modelBuilder.Entity("TaxiService.Core.CarInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("OrderId");

                    b.ToTable("CarInfo");
                });

            modelBuilder.Entity("TaxiService.Core.ClientResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarInfoId");

                    b.ToTable("ClientResponse");
                });

            modelBuilder.Entity("TaxiService.Core.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CarMark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientResponseId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("TaxiService.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TaxiService.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d2ad42f0-ea92-4fad-b57e-1f593b1ecf7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "618512d4-7015-48f0-9b65-47ee3b6c306f",
                            Email = "admin@taxiseervice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TAXISEERVICE.COM",
                            NormalizedUserName = "ADMIN@TAXISEERVICE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3ng12/MvZC2E1sqpfM9yNsJSN9pJft+Ricdbqifk4+RmtBNde10ASCSKnlrHjMDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "395467cc-7287-467e-aa3c-00b7f72fac47",
                            TwoFactorEnabled = false,
                            UserName = "admin@taxiseervice.com"
                        },
                        new
                        {
                            Id = "62b9d0bc-dafa-4ed3-a02b-ca8ca3ef8bd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23b65def-359a-4838-b380-b31a43626bcd",
                            Email = "user@taxiseervice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@TAXISEERVICE.COM",
                            NormalizedUserName = "USER@TAXISEERVICE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ6OD1mU4yZ+R40woevIDvJn9A6+92QO69RM/wWyHxNflgD3FpoG1+weWCJYTWNQdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70077c17-fd2a-43da-90de-cebec5de2fd1",
                            TwoFactorEnabled = false,
                            UserName = "user@taxiseervice.com"
                        },
                        new
                        {
                            Id = "8078e7a8-5392-49f9-8d4a-49dec4f7c33f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44d1f30a-67f6-4e88-817f-cfda5b2005c4",
                            Email = "driver@taxiseervice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER@TAXISEERVICE.COM",
                            NormalizedUserName = "DRIVER@TAXISEERVICE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJxugTdzWNvH0BXDlH26DiCzFKUSS7wzyyTFUBOyl2AIXrSLRoJN921eCM86Widw5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8143e4c0-8ccd-4281-8196-9bd58cc6c510",
                            TwoFactorEnabled = false,
                            UserName = "driver@taxiseervice.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Core.BodyType", b =>
                {
                    b.HasOne("TaxiService.Core.CarInfo", null)
                        .WithMany("BodyTypeId")
                        .HasForeignKey("CarInfoId");
                });

            modelBuilder.Entity("TaxiService.Core.CarClass", b =>
                {
                    b.HasOne("TaxiService.Core.CarInfo", null)
                        .WithMany("CarClassId")
                        .HasForeignKey("CarInfoId");
                });

            modelBuilder.Entity("TaxiService.Core.CarColor", b =>
                {
                    b.HasOne("TaxiService.Core.CarInfo", null)
                        .WithMany("ColorId")
                        .HasForeignKey("CarInfoId");
                });

            modelBuilder.Entity("TaxiService.Core.CarInfo", b =>
                {
                    b.HasOne("TaxiService.Core.User", "Driver")
                        .WithMany("CarInfos")
                        .HasForeignKey("DriverId");

                    b.HasOne("TaxiService.Core.Order", null)
                        .WithMany("CarsId")
                        .HasForeignKey("OrderId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TaxiService.Core.ClientResponse", b =>
                {
                    b.HasOne("TaxiService.Core.CarInfo", null)
                        .WithMany("ClientResponseId")
                        .HasForeignKey("CarInfoId");
                });

            modelBuilder.Entity("TaxiService.Core.Mark", b =>
                {
                    b.HasOne("TaxiService.Core.ClientResponse", null)
                        .WithMany("MarkId")
                        .HasForeignKey("ClientResponseId");
                });

            modelBuilder.Entity("TaxiService.Core.CarInfo", b =>
                {
                    b.Navigation("BodyTypeId");

                    b.Navigation("CarClassId");

                    b.Navigation("ClientResponseId");

                    b.Navigation("ColorId");
                });

            modelBuilder.Entity("TaxiService.Core.ClientResponse", b =>
                {
                    b.Navigation("MarkId");
                });

            modelBuilder.Entity("TaxiService.Core.Order", b =>
                {
                    b.Navigation("CarsId");
                });

            modelBuilder.Entity("TaxiService.Core.User", b =>
                {
                    b.Navigation("CarInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
