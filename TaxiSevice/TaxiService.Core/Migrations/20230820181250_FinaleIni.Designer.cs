// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiService.Core;

#nullable disable

namespace TaxiService.Core.Migrations
{
    [DbContext(typeof(TaxiServiceDbContext))]
    [Migration("20230820181250_FinaleIni")]
    partial class FinaleIni
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "777972fb-f79f-423d-b53d-0edf8f9dafe1",
                            ConcurrencyStamp = "1ee931fa-1647-432a-9fd1-9c815ecba4a0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ffd7bf94-ac20-4a33-9a1f-39be05ee5d09",
                            ConcurrencyStamp = "3adbc0b7-71ae-4980-92ab-3f3cee44adf0",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "35b1ea46-ee4f-4240-aa42-b4b2e3e28e15",
                            ConcurrencyStamp = "7344bec8-aa8d-4df9-8e26-4cc95e24d472",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "06e36b8b-d8db-44e8-a284-489782f887c9",
                            RoleId = "777972fb-f79f-423d-b53d-0edf8f9dafe1"
                        },
                        new
                        {
                            UserId = "c3d2ae00-622a-45f2-a957-c23852e8be1a",
                            RoleId = "35b1ea46-ee4f-4240-aa42-b4b2e3e28e15"
                        },
                        new
                        {
                            UserId = "c697ad05-e3a2-4fc6-ba18-9e0cabd93c7e",
                            RoleId = "ffd7bf94-ac20-4a33-9a1f-39be05ee5d09"
                        },
                        new
                        {
                            UserId = "c697ad05-e3a2-4fc6-ba18-9e0cabd93c7e",
                            RoleId = "777972fb-f79f-423d-b53d-0edf8f9dafe1"
                        },
                        new
                        {
                            UserId = "c3d2ae00-622a-45f2-a957-c23852e8be1a",
                            RoleId = "777972fb-f79f-423d-b53d-0edf8f9dafe1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaxiService.Core.CarClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CarClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarClassName = "Економ-клас"
                        },
                        new
                        {
                            Id = 2,
                            CarClassName = "Комфорт-клас"
                        },
                        new
                        {
                            Id = 3,
                            CarClassName = "Бізнес-клас"
                        });
                });

            modelBuilder.Entity("TaxiService.Core.CarColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarColor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorName = "Синій"
                        },
                        new
                        {
                            Id = 2,
                            ColorName = "Зелений"
                        },
                        new
                        {
                            Id = 3,
                            ColorName = "Червоний"
                        },
                        new
                        {
                            Id = 4,
                            ColorName = "Білий"
                        },
                        new
                        {
                            Id = 5,
                            ColorName = "Сірий"
                        },
                        new
                        {
                            Id = 6,
                            ColorName = "Чорний"
                        });
                });

            modelBuilder.Entity("TaxiService.Core.CarInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CarColorId")
                        .HasColumnType("int");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarClassId");

                    b.HasIndex("CarColorId");

                    b.HasIndex("DriverId");

                    b.ToTable("CarInfo");
                });

            modelBuilder.Entity("TaxiService.Core.ClientResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MarkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("ClientResponse");
                });

            modelBuilder.Entity("TaxiService.Core.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MarkName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MarkName = "Відмінно"
                        },
                        new
                        {
                            Id = 2,
                            MarkName = "Добре"
                        },
                        new
                        {
                            Id = 3,
                            MarkName = "Не погано"
                        },
                        new
                        {
                            Id = 4,
                            MarkName = "Погано"
                        },
                        new
                        {
                            Id = 5,
                            MarkName = "Дуже погано"
                        });
                });

            modelBuilder.Entity("TaxiService.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientResponseId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TaxiService.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "06e36b8b-d8db-44e8-a284-489782f887c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfb0b971-1b41-473a-b9ce-527320db2069",
                            Email = "admin@taxiseervice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TAXISEERVICE.COM",
                            NormalizedUserName = "ADMIN@TAXISEERVICE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7gH0HVxjKgGFp0bIyU54pzRNFd+pCgWu7koarUIxdGouJpJIJxWHMy3VI8vOgOPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7e0c27c-c3e9-4f22-b092-43d55592bc92",
                            TwoFactorEnabled = false,
                            UserName = "admin@taxiseervice.com"
                        },
                        new
                        {
                            Id = "c697ad05-e3a2-4fc6-ba18-9e0cabd93c7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff837348-5d19-44fe-bf07-1274d9bf9693",
                            Email = "user@taxiseervice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@TAXISEERVICE.COM",
                            NormalizedUserName = "USER@TAXISEERVICE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENxrvd5d8jUDzUuyIkUt/6/UYiCyQnT1r/NYJXRnNuVWcAq2PA3WIJic7MnZWK7XIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eee9432f-d368-41e0-82d7-77fd64bc060c",
                            TwoFactorEnabled = false,
                            UserName = "user@taxiseervice.com"
                        },
                        new
                        {
                            Id = "c3d2ae00-622a-45f2-a957-c23852e8be1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c76bf65-b0b0-4992-8ad2-dc7eb44a5326",
                            Email = "driver@taxiseervice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER@TAXISEERVICE.COM",
                            NormalizedUserName = "DRIVER@TAXISEERVICE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJee7RT4dMw4sZnijg1vvjosRypV12fl0D90GNguMHj6u3Zu2I04kZLFLOSujHcCZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5ff38a3-904e-464c-b904-c64dfafec299",
                            TwoFactorEnabled = false,
                            UserName = "driver@taxiseervice.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaxiService.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Core.CarInfo", b =>
                {
                    b.HasOne("TaxiService.Core.CarClass", "CarClass")
                        .WithMany("CarInfos")
                        .HasForeignKey("CarClassId");

                    b.HasOne("TaxiService.Core.CarColor", "CarColor")
                        .WithMany("CarInfos")
                        .HasForeignKey("CarColorId");

                    b.HasOne("TaxiService.Core.User", "Driver")
                        .WithMany("CarInfos")
                        .HasForeignKey("DriverId");

                    b.Navigation("CarClass");

                    b.Navigation("CarColor");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TaxiService.Core.ClientResponse", b =>
                {
                    b.HasOne("TaxiService.Core.Mark", "Mark")
                        .WithMany("ClientResponses")
                        .HasForeignKey("MarkId");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("TaxiService.Core.Order", b =>
                {
                    b.HasOne("TaxiService.Core.CarInfo", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarId");

                    b.HasOne("TaxiService.Core.ClientResponse", "ClientResponse")
                        .WithMany("OrderId")
                        .HasForeignKey("ClientResponseId");

                    b.Navigation("Car");

                    b.Navigation("ClientResponse");
                });

            modelBuilder.Entity("TaxiService.Core.CarClass", b =>
                {
                    b.Navigation("CarInfos");
                });

            modelBuilder.Entity("TaxiService.Core.CarColor", b =>
                {
                    b.Navigation("CarInfos");
                });

            modelBuilder.Entity("TaxiService.Core.CarInfo", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TaxiService.Core.ClientResponse", b =>
                {
                    b.Navigation("OrderId");
                });

            modelBuilder.Entity("TaxiService.Core.Mark", b =>
                {
                    b.Navigation("ClientResponses");
                });

            modelBuilder.Entity("TaxiService.Core.User", b =>
                {
                    b.Navigation("CarInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
